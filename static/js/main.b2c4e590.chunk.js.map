{"version":3,"sources":["adapter/api.ts","state/action-creaters/action_creaters.ts","utils/shared/common_sizes.ts","components/FeaturedContentDetail/FeaturedContentDetail.tsx","components/FeaturedContent/FeaturedContent.tsx","utils/debounce.ts","components/SearchSuggestionsBox/SearchSuggestionsBox.tsx","components/SearchBar/SearchBar.tsx","components/SuggestionListItem/SuggestionListItem.tsx","components/SuggestionList/SuggestionList.tsx","App.tsx","reportWebVitals.ts","state/models/search_result.ts","state/reducers/searchResultsReducer.ts","state/reducers/searchSuggestionsReducer.ts","state/models/utils.ts","state/reducers/utilsReducer.ts","state/reducers/index.ts","state/store.ts","theme.ts","index.tsx"],"names":["YOUTUBE_SEARCH_RESULTS_API","generateGoogleSearchSuggestionsAPIURL","searchQuery","encodeURI","generateYoutubeSearchResultsAPIURL","fetchYoutubeSearchResults","Promise","resolve","reject","a","fetch","raw","json","fetchGoogleSearchSuggestions","getSearchResults","dispatch","type","error","payload","resetSearchResults","getSearchSuggestions","resetSearchSuggestions","updateFeaturedContent","index","updatingFeaturedContent","updatedFeaturedContent","loadingInitialSearchResults","resetFeaturedContentIndex","suggestionsList","document","getElementById","scrollTo","COMMON_SIZES","FeaturedContentDetail","props","utils","useSelector","state","minWidth","height","padding","marginTop","borderRadius","boxShadow","isFetchedSearchResults","isFeaturedContentUpdated","isLoaded","as","size","featuredContent","title","noOfLines","description","FeaturedContent","app_state","useDispatch","ACTION_CREATORS","bindActionCreators","actionCreators","display","flexDirection","position","width","flex","TOP_NAVIGATION_BAR_HEIGHT","overflowY","maxHeight","ratio","onLoad","src","search_results","featured_content_index","resource_url","toString","allowFullScreen","debounce","func","timer","delay","args","clearTimeout","setTimeout","SearchSuggestionsBox","result","search_suggestions","updateSearchResults","e","target","innerText","value","paddingX","zIndex","backgroundColor","borderBottomRadius","map","suggestion","marginY","onClick","_hover","cursor","SearchBar","useEffect","id","placeholder","borderBottomWidth","borderBottomColor","color","_focus","fontSize","onInput","onKeyUp","key","trim","match","SuggestionListItem","maxH","item","thumbnail_url","alt","marginLeft","SuggestionList","spacing","suggestions","length","App","searchResults","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialSearchResults","searchResultsReducer","action","forEach","search_result","snippet","videoId","thumbnails","high","url","push","searchSuggestionsReducer","initialUtils","isPageLoading","isPageFinishedLoading","isFetchingSearchResults","utilsReducer","window","innerWidth","reducers","combineReducers","store","createStore","applyMiddleware","thunk","theme","extendTheme","fonts","heading","body","mono","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b2c4e590.chunk.js","sourcesContent":["/**\n * This file contains functions & constants which are responsible to provide the correct api endpoints\n */\n\n/**\n * @description String constant for google's search suggestions api endpoint\n */\nconst GOOGLE_SEARCH_SUGGESTIONS_API: string = `https://search-suggestions-api.herokuapp.com/`;\n\n//Code Mentor: AIzaSyAhIcGwUsCX_w1d4t0dMjKujYrAI15P0FA\n//My Personal: AIzaSyCmtIfcn5YjyoS1nPPQI3NTVCvwtg8sPUE\n/**\n * @description API Key to access youtube Data API\n */\nconst API_KEY = \"AIzaSyAhIcGwUsCX_w1d4t0dMjKujYrAI15P0FA\";\n\n/**\n * @description String constant for youtube's search api endpoint\n */\nconst YOUTUBE_SEARCH_RESULTS_API: string = `https://youtube.googleapis.com/youtube/v3/search?part=snippet&maxResults=7&regionCode=IN&order=viewCount&key=${API_KEY}`;\n\n/**\n * @description Function to generate google's search suggestions API Endpoint based on the search query\n * @param searchQuery search query\n * @returns google's search suggestions API Endpoint\n */\n\nconst generateGoogleSearchSuggestionsAPIURL = (searchQuery: string): string => {\n    return `${GOOGLE_SEARCH_SUGGESTIONS_API}?q=${encodeURI(searchQuery)}`;\n};\n\n/**\n * @description Function to generate youtube's search API Endpoint based on the search query\n * @param searchQuery search query\n * @returns youtube's search API Endpoint\n */\nconst generateYoutubeSearchResultsAPIURL = (searchQuery: string): string => {\n    return `${YOUTUBE_SEARCH_RESULTS_API}&q=${encodeURI(searchQuery)}`;\n};\n\n\n/**\n * @description This function is responsible for fetching youtube search results from youtube data api\n * @param searchQuery search query\n * @returns Promise that will resolve or reject based on API call\n */\nexport const fetchYoutubeSearchResults = (searchQuery: string) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            let raw = await fetch(generateYoutubeSearchResultsAPIURL(searchQuery));\n            let json: any = await raw.json();   \n            \n            resolve(json);\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n\n/**\n * @description This function is responsible for fetching google search suggestions results from google's api\n * @param searchQuery search query\n * @returns Promise that will resolve or reject based on API call\n */\nexport const fetchGoogleSearchSuggestions = (searchQuery: string) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            let raw = await fetch(generateGoogleSearchSuggestionsAPIURL(searchQuery));\n            let json: any = await raw.json();\n\n            resolve(json);\n        } catch (error) {\n            reject(error);\n        }\n    });\n};","import { fetchGoogleSearchSuggestions, fetchYoutubeSearchResults } from \"../../adapter/api\";\n\nexport const getSearchResults = (searchQuery: string) => {\n    return async (dispatch: any) => {\n        dispatch({\n            type: 'FETCHING_SEARCH_RESULTS'\n        });\n        let json: any = await fetchYoutubeSearchResults(searchQuery);\n        if(!json?.error){\n            dispatch({\n                type: 'FETCHED_SEARCH_RESULTS'\n            });\n            dispatch({\n                type: 'UPDATE_SEARCH_RESULTS',\n                payload: json['items'],\n            });\n        }\n        dispatch({\n            type: 'RESET_SEARCH_SUGGESTIONS',\n        });\n    };\n};\n\nexport const resetSearchResults = () => {\n    return (dispatch: any) => {\n        dispatch({\n            type: 'RESET_SEARCH_RESULTS'\n        });\n    };\n};\n\nexport const getSearchSuggestions = (searchQuery: string) => {\n    return async (dispatch: any) => {\n        let json: any = await fetchGoogleSearchSuggestions(searchQuery);\n        dispatch({\n            type: 'FETCHED_SEARCH_SUGGESTIONS',\n            payload: json,\n        });\n    };\n};\n\nexport const resetSearchSuggestions = () => {\n    return (dispatch: any) => {\n        dispatch({\n            type: 'RESET_SEARCH_SUGGESTIONS',\n        });\n    };\n};\n\nexport const updateFeaturedContent = (index: number) => {\n    return (dispatch: any) => {\n        dispatch({\n            type: 'UPDATE_FEATURED_CONTENT',\n            payload: index,\n        });\n    };\n};\n\nexport const updatingFeaturedContent = () => {\n    return (dispatch: any) => {\n        dispatch({\n            type: 'UPDATING_FEATURED_CONTENT',\n        });\n    };\n};\n\nexport const updatedFeaturedContent = () => {\n    return (dispatch: any) => {\n        dispatch({\n            type: 'UPDATED_FEATURED_CONTENT',\n        });\n    };\n};\n\nexport const loadingInitialSearchResults = () => {\n    return (dispatch: any) => {\n        dispatch({\n            type: 'FETCHING_SEARCH_DATA'\n        });\n    };\n};\n\nexport const resetFeaturedContentIndex = () => {\n\n    let suggestionsList = document.getElementById(\"suggestions-list\");\n    suggestionsList?.scrollTo(0,0);\n\n    return (dispatch: any) => {\n        dispatch({\n            type: 'RESET_SELECTED_INDEX'\n        });\n    };\n};","const COMMON_SIZES = {\n    \"TOP_NAVIGATION_BAR_HEIGHT\": \"100px\",\n};\n\nexport default COMMON_SIZES;","import { Container, Heading, Skeleton, SkeletonText, Text } from \"@chakra-ui/react\";\nimport React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport AppState from \"../../state/models/app_state\";\nimport SearchResult from \"../../state/models/search_result\";\nimport Utils from \"../../state/models/utils\";\n\ninterface FeaturedContentDetailProps {\n    featuredContent: SearchResult,\n}\n\n/**\n * @description FeaturedContentDetail Component will render the title & description of the featured content which is passed as argument to it\n * @param props FeaturedContentDetailProps\n * @returns FeaturedContentDetail\n */\nconst FeaturedContentDetail: FunctionComponent<FeaturedContentDetailProps> = (props) => {\n\n    const utils: Utils = useSelector((state: AppState) => state.utils);\n\n    return (\n        <Container minWidth=\"100%\" height=\"100%\" padding=\"4px\" marginTop=\"4px\" borderRadius=\"4px\" boxShadow=\"grey 0px 0px 4px\">\n            <Skeleton height={(utils.isFetchedSearchResults && utils.isFeaturedContentUpdated)? \"auto\": \"24px\"} isLoaded={utils.isFetchedSearchResults && utils.isFeaturedContentUpdated}>\n                <Heading as=\"h3\" size=\"md\"> {props?.featuredContent?.title} </Heading>\n            </Skeleton>\n            <SkeletonText marginTop=\"8px\" isLoaded={utils.isFetchedSearchResults && utils.isFeaturedContentUpdated} noOfLines={4}>\n                <Text>{props?.featuredContent?.description}</Text>\n            </SkeletonText>           \n        </Container>\n    );\n}\n\nexport default FeaturedContentDetail;","import { AspectRatio, Box, Skeleton } from \"@chakra-ui/react\";\nimport React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { actionCreators } from \"../../state/action-creaters\";\nimport AppState from \"../../state/models/app_state\";\nimport COMMON_SIZES from \"../../utils/shared/common_sizes\";\nimport FeaturedContentDetail from \"../FeaturedContentDetail/FeaturedContentDetail\";\n\n/**\n * @description FeaturedContent Component will render selected video's details such as thumbnail, title & description.\n * @returns FeaturedContent\n */\nconst FeaturedContent: FunctionComponent = () => {\n\n    const app_state: AppState = useSelector((state: AppState) => state);\n\n    const dispatch: Dispatch = useDispatch();\n\n    const ACTION_CREATORS = bindActionCreators(actionCreators, dispatch);\n\n    return (\n        <Box padding=\"4px\" display=\"flex\" flexDirection=\"column\" position=\"relative\" width={[\"100vw\", \"100vw\", \"70vw\"]} flex=\"3\" height={[\"auto\", \"auto\", `calc(100vh - ${COMMON_SIZES.TOP_NAVIGATION_BAR_HEIGHT})`]} overflowY=\"scroll\">\n            <AspectRatio flex=\"2\" maxHeight=\"80%\" ratio={[3 / 2]}>\n                <Skeleton isLoaded={app_state.utils.isFetchedSearchResults && app_state.utils.isFeaturedContentUpdated}>\n                    <iframe height=\"100%\" width=\"100%\" onLoad={() => ACTION_CREATORS.updatedFeaturedContent()} title=\"naruto\" src={app_state?.search_results[app_state?.utils?.featured_content_index]?.resource_url?.toString()} allowFullScreen />\n                </Skeleton>\n            </AspectRatio>\n            <FeaturedContentDetail featuredContent={app_state?.search_results[app_state?.utils?.featured_content_index]} />\n        </Box>\n    );\n}\n\nexport default FeaturedContent;","function debounce(func: Function, delay = 240){\n    let timer: NodeJS.Timeout;\n    return (...args: any) => {\n      clearTimeout(timer);\n      timer = setTimeout(() => { func(...args) }, delay);\n    };\n}\n\nexport default debounce;\n\n/**\n * The following commented code is just for my reference.\n */\n\n// function debounce<Params extends any[]>( func: (...args: Params) => any, timeout: number ): (...args: Params) => void \n// {\n//     let timer: NodeJS.Timeout;\n//     return (...args: Params) => {\n//       clearTimeout(timer);\n//       timer = setTimeout(() => {\n//         func(...args);\n//       }, timeout);\n//     }\n// }\n\n// class Test {\n//   t: number;\n//   constructor(tval: number) {\n//       this.t = tval;\n//   }\n\n//   logger() {\n//       console.log(\"THIS\", this);\n//   }\n// }\n\n// function debounce(func: Function, context: any, delay = 240): Function {\n//   let timer: any;\n//   return (...args: any): void => {\n//   //   clearTimeout(timer);\n//     timer = setTimeout(() => {\n//       return func.apply(context, args);\n//   }, delay);\n//   };\n// }\n\n\n\n// Current Production Codebase's Debounced Function\n\n// export function useDebounced<T>(value: T, delay: number): T {\n//   const [debouncedValue, setDebouncedValue] = useState<T>(value);\n//   useEffect(() => {\n//     const handler = setTimeout(() => {\n//       setDebouncedValue(value);\n//     }, delay);\n//     return () => {\n//       clearTimeout(handler);\n//     };\n//   }, [value, delay]);\n\n//   return debouncedValue;\n// }","import { Container, Text } from \"@chakra-ui/react\";\nimport React, { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { actionCreators } from \"../../state/action-creaters\";\nimport AppState from \"../../state/models/app_state\";\n\n/**\n * @description This component will show user a list of search suggestions\n * @returns SearchSuggestionsBox\n */\nconst SearchSuggestionsBox: FunctionComponent = () => {\n\n    const result: Array<string> = useSelector((state: AppState) => state.search_suggestions);\n\n    const dispatch: Dispatch = useDispatch();\n\n    const ACTION_CREATORS = bindActionCreators(actionCreators, dispatch);\n\n    type UpdateSearchResultsFunction = (event: any) => void;\n    const updateSearchResults: UpdateSearchResultsFunction = (e) => {\n        ACTION_CREATORS.resetFeaturedContentIndex();\n        ACTION_CREATORS.resetSearchResults();\n        ACTION_CREATORS.getSearchResults(e?.target?.innerText);\n        ACTION_CREATORS.resetSearchSuggestions();\n        let searchBox: any = document.getElementById(\"search-box\");\n        searchBox.value = e?.target?.innerText;\n    };\n\n    type RenderSuggestionsFunction = () => Array<any>;\n    const renderSuggestions: RenderSuggestionsFunction = () => {\n        return result.map((suggestion: string) => {\n            return (\n            <Text marginY=\"4px\" onClick={updateSearchResults} key={suggestion} _hover={{backgroundColor: \"#EEEEEE\", cursor: \"pointer\" }} borderRadius=\"7px\" padding=\"4px 12px\">{suggestion}</Text>\n            );\n        });\n    };\n\n    return (\n        <Container paddingX=\"4px\" minWidth=\"full\" position=\"absolute\" zIndex=\"1\" backgroundColor=\"white\" boxShadow=\"grey 0 0 8px\" borderBottomRadius=\"8px\">\n            {renderSuggestions()}\n        </Container>\n    );\n}\n\nexport default SearchSuggestionsBox;","import { Input } from \"@chakra-ui/react\";\nimport React, { FunctionComponent, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { actionCreators } from \"../../state/action-creaters\";\nimport debounce from \"../../utils/debounce\";\nimport COMMON_SIZES from \"../../utils/shared/common_sizes\";\nimport SearchSuggestionsBox from \"../SearchSuggestionsBox/SearchSuggestionsBox\";\n\n/**\n * @description SearchBar Component will be responsible for taking inputs from user by rendering a search input box & update the application state respectively to show expected output\n * @returns SearchBar\n */\nconst SearchBar: FunctionComponent = () => {\n  const dispatch: Dispatch = useDispatch();\n\n  const ACTION_CREATORS = bindActionCreators(actionCreators, dispatch);\n\n  useEffect(() => {\n    ACTION_CREATORS.getSearchResults(\"macbook\");\n    // eslint-disable-next-line\n  }, []);\n\n  type GetSearchSuggestionsFunction = (searchQuery: string) => void;\n  const getSearchSuggestions: GetSearchSuggestionsFunction = (searchQuery) => {\n    if (searchQuery) {\n      ACTION_CREATORS.getSearchSuggestions(searchQuery);\n    } else {\n      ACTION_CREATORS.resetSearchSuggestions();\n    }\n  };\n\n  type GetSearchResultsFunction = (event: any) => void;\n  const getSearchResults: GetSearchResultsFunction = (e) => {\n    if (e?.key === \"Enter\") {\n      let searchQuery: string = e?.target?.value;\n      searchQuery = searchQuery.trim();\n      let searchBox: any = document.getElementById(\"search-box\");\n      searchBox.value = searchQuery;\n      let regex = /^[a-zA-Z0-9_ ]*$/;\n      if (searchQuery && searchQuery.match(regex)) {\n        ACTION_CREATORS.resetFeaturedContentIndex();\n        ACTION_CREATORS.resetSearchResults();\n        ACTION_CREATORS.getSearchResults(searchQuery);\n        ACTION_CREATORS.resetSearchSuggestions();\n      }\n    }\n  };\n\n  return (\n    <>\n      <Input\n        id=\"search-box\"\n        placeholder={`Have fun viewing...`}\n        borderBottomWidth=\"4px\"\n        _hover={{ borderBottomColor: \"rgba(174, 38, 94, 60%)\" }}\n        borderBottomColor=\"rgba(174, 38, 94, 60%)\"\n        borderRadius=\"0\"\n        color=\"#AE265E\"\n        _focus={{ borderBottomColor: \"#EC1063\" }}\n        height={COMMON_SIZES.TOP_NAVIGATION_BAR_HEIGHT}\n        fontSize={[\"9vw\", \"7vw\", \"5vw\"]}\n        padding=\"8px 16px\"\n        onInput={debounce(\n          (e: any) => getSearchSuggestions(e?.target?.value),\n          124\n        )}\n        onKeyUp={getSearchResults}\n      />\n      <SearchSuggestionsBox />\n    </>\n  );\n};\n\nexport default SearchBar;\n","import { AspectRatio, ListItem, Text } from \"@chakra-ui/react\";\nimport { FunctionComponent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { actionCreators } from \"../../state/action-creaters\";\nimport AppState from \"../../state/models/app_state\";\nimport SearchResult from \"../../state/models/search_result\";\nimport Utils from \"../../state/models/utils\";\n\ninterface SuggestionListItemProps {\n    item: SearchResult,\n    index: number,\n}\n\n/**\n * @description SuggestionListItem Component will render a small thumbnail for the search results\n * @param props SuggestionListItemProps\n * @returns SuggestionListItem\n */\nconst SuggestionListItem: FunctionComponent<SuggestionListItemProps> = (props) => {\n\n    const dispatch: Dispatch = useDispatch();\n\n    const ACTION_CREATORS = bindActionCreators(actionCreators, dispatch);\n\n    const utils: Utils = useSelector((state: AppState) => state.utils);\n\n    type UpdateFeaturedContentFunction = () => void;\n    const updateFeaturedContent: UpdateFeaturedContentFunction = () => {\n        if(utils.featured_content_index !== props?.index){\n            ACTION_CREATORS.updatingFeaturedContent();\n            ACTION_CREATORS.updateFeaturedContent(props?.index);\n        }\n    };\n\n    return (\n        <ListItem width=\"100%\" backgroundColor={utils?.featured_content_index === props?.index? \"green.100\": \"pink.100\"} boxShadow=\"grey 0 0 4px\" borderRadius=\"4px\" padding=\"4px\" cursor=\"pointer\" onClick={updateFeaturedContent}>\n            <AspectRatio display={[\"none\", \"none\", \"block\"]} maxH=\"80%\" ratio={ 2 / 1 }>\n                <img src={props?.item?.thumbnail_url?.toString()} alt={props?.item?.title } />\n            </AspectRatio>\n            <Text marginTop=\"4px\" marginLeft={[\"4px\", \"4px\", \"0\"]}> {props?.item?.title} </Text>\n        </ListItem>\n    );\n}\n\nexport default SuggestionListItem;","import { Box, List, Skeleton } from \"@chakra-ui/react\";\nimport React, { FunctionComponent } from \"react\";\nimport SearchResult from \"../../state/models/search_result\";\nimport COMMON_SIZES from \"../../utils/shared/common_sizes\";\nimport SuggestionListItem from \"../SuggestionListItem/SuggestionListItem\";\n\ninterface SuggestionListProps {\n    suggestions: Array<SearchResult>,\n}\n\ntype RenderSuggestionListItemsFunction = (suggestions: Array<SearchResult>) => Array<any>;\nconst renderSuggestionListItems: RenderSuggestionListItemsFunction = (suggestions) => {\n    if(suggestions?.length > 0){\n        return suggestions?.map((item: SearchResult, index) => <SuggestionListItem key={index} index={index} item={item} />);\n    }\n    return [1,2,3,4,5].map((item: number) => <Skeleton height={[\"51px\", \"51px\", \"180px\"]} key={item} />);\n}\n\n/**\n * @description SuggestionList Component will render a list of SuggestionListItem component\n * @param props SuggestionListProps\n * @returns SuggestionList\n */\nconst SuggestionList: FunctionComponent<SuggestionListProps> = (props) => {\n    return (\n        <Box id=\"suggestions-list\" width={[\"100vw\", \"100vw\", \"30vw\"]} overflowY=\"scroll\" height={[\"auto\", \"auto\", `calc(100vh - ${COMMON_SIZES.TOP_NAVIGATION_BAR_HEIGHT})`]} flex=\"1\">\n            <List spacing=\"6px\" padding=\"4px\">\n                {renderSuggestionListItems(props.suggestions)} \n            </List>\n        </Box> \n    );\n}\n\nexport default SuggestionList;","import { Wrap, WrapItem } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport \"./App.css\";\nimport FeaturedContent from \"./components/FeaturedContent/FeaturedContent\";\nimport SearchBar from \"./components/SearchBar/SearchBar\";\nimport SuggestionList from \"./components/SuggestionList/SuggestionList\";\nimport { actionCreators } from \"./state/action-creaters\";\nimport AppState from \"./state/models/app_state\";\nimport SearchResult from \"./state/models/search_result\";\n\nfunction App() {\n  const searchResults: Array<SearchResult> = useSelector(\n    (state: AppState) => state.search_results\n  );\n  const dispatch = useDispatch();\n\n  const ACTION_CREATORS = bindActionCreators(actionCreators, dispatch);\n\n  return (\n    <>\n      <SearchBar />\n      <Wrap\n        spacing=\"0\"\n        onClick={() => ACTION_CREATORS.resetSearchSuggestions()}\n      >\n        <WrapItem>\n          <FeaturedContent />\n        </WrapItem>\n        <WrapItem>\n          <SuggestionList suggestions={searchResults} />\n        </WrapItem>\n      </Wrap>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","interface SearchResult {\n    'resource_url': String,\n    'thumbnail_url': String,\n    'description': String,\n    'title': string,\n}\n\nexport default SearchResult;\n\nexport const initialSearchResults: Array<SearchResult> = [];","import SearchResult, { initialSearchResults } from \"../models/search_result\";\n\nconst searchResultsReducer = (state: Array<SearchResult> = initialSearchResults , action: any): Array<SearchResult> => {\n\n    switch(action.type){\n        case 'UPDATE_SEARCH_RESULTS':\n            let search_results: Array<SearchResult> = [];\n            action?.payload?.forEach((item: any) => {\n                let search_result: SearchResult = {\n                    title: `${item?.snippet?.title}`,\n                    resource_url: `https://www.youtube.com/embed/${item?.id?.videoId}`,\n                    description: `${item?.snippet?.description}`,\n                    thumbnail_url: `${item?.snippet?.thumbnails?.high?.url}`,\n                };\n                search_results.push(search_result);\n            });\n            return search_results;\n        case 'RESET_SEARCH_RESULTS':\n            return [];\n        default:\n            return state;\n    }\n};\n\nexport default searchResultsReducer;","\nconst searchSuggestionsReducer = (state: Array<string> = [] , action: any): Array<string> => {\n    switch(action.type){\n        case 'FETCHED_SEARCH_SUGGESTIONS':\n            return action.payload;\n        case 'RESET_SEARCH_SUGGESTIONS':\n            return [];\n        default:\n            return state;\n    }\n};\n\nexport default searchSuggestionsReducer;","interface Utils {\n    'isPageLoading': boolean,\n    'isPageFinishedLoading': boolean,\n    'isFetchingSearchResults': boolean,\n    'isFetchedSearchResults': boolean,\n    'featured_content_index': number,\n    'isFeaturedContentUpdated': boolean,\n}\n\nexport default Utils;\n\nexport const initialUtils: Utils = {\n    isPageLoading: true,\n    isPageFinishedLoading: false,\n    isFetchingSearchResults: false,\n    isFetchedSearchResults: false,\n    featured_content_index: 0,\n    isFeaturedContentUpdated: false,\n};","import Utils, { initialUtils } from \"../models/utils\";\n\nconst utilsReducer = (state: Utils = initialUtils , action: any): Utils => {\n    switch(action.type){\n        case 'UPDATE_FEATURED_CONTENT':\n            if(state.featured_content_index !== action?.payload){\n                if(window.innerWidth <= 480){\n                    window.scrollTo(0, 0);   \n                }\n                return { ...state, featured_content_index: action?.payload };\n            }\n            return state;\n        case 'UPDATING_FEATURED_CONTENT':\n            return { ...state, isFeaturedContentUpdated: false };\n        case 'UPDATED_FEATURED_CONTENT':\n            return { ...state, isFeaturedContentUpdated: true };\n        case 'FETCHING_SEARCH_RESULTS':\n            return { ...state, isFetchingSearchResults: true, isFetchedSearchResults: false };\n        case 'FETCHED_SEARCH_RESULTS':\n            return { ...state, isFetchedSearchResults: true, isFetchingSearchResults: false };\n        case 'RESET_SELECTED_INDEX':\n            return { ...state, featured_content_index: 0 };\n        default:\n            return state;\n    }\n};\n\nexport default utilsReducer;","import { combineReducers } from \"redux\";\nimport searchResultsReducer from \"./searchResultsReducer\";\nimport searchSuggestionsReducer from \"./searchSuggestionsReducer\";\nimport utilsReducer from \"./utilsReducer\";\n\nconst reducers = combineReducers({\n    'search_results': searchResultsReducer,\n    'search_suggestions': searchSuggestionsReducer,\n    'utils': utilsReducer,\n});\n\nexport default reducers;","import { applyMiddleware, createStore } from \"redux\";\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from \"redux-thunk\";\nimport reducers from \"./reducers/index\";\n\nconst store = createStore(\n    reducers,\n    {},\n    applyMiddleware(thunk),\n    // Uncomment below line & comment above line to enable redux devtools browser extension\n    // composeWithDevTools(\n    //     applyMiddleware(thunk),\n    // )\n);\n\nexport default store;","import { extendTheme } from \"@chakra-ui/react\";\n\nconst theme = extendTheme({\n  fonts: {\n    heading: \"Lato\",\n    body: \"Lato\",\n    mono: \"Lato\",\n  },\n});\n\nexport default theme;","import { ChakraProvider } from \"@chakra-ui/react\";\nimport \"@fontsource/lato/index.css\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport store from './state/store';\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ChakraProvider theme={theme}>\n        <App />\n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}